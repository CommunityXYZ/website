{
  "version": 3,
  "sources": ["../../server/controllers/home.ts"],
  "sourcesContent": ["import express from 'express';\r\nimport path from 'path';\r\nimport Arweave from 'arweave';\r\nimport mongoose from 'mongoose';\r\nimport Community from 'community-js';\r\nimport { pages } from '../pages';\r\n\r\nconst Account = mongoose.model('Account', {\r\n  // @ts-ignore\r\n  addy: {type: String, unique: true},\r\n  referrer: {type: String, index: true},\r\n  firstTx: Number,\r\n  lastTx: Number,\r\n  date: { type: Date, default: Date.now }\r\n});\r\n\r\nconst wallet = process.env.WALLET;\r\nconsole.log(wallet);\r\nexport default class HomeController {\r\n  path = '/';\r\n  router = express.Router();\r\n  \r\n  private isSetTxId = false;\r\n  private arweave: Arweave;\r\n  private community: Community;\r\n  \r\n  constructor(arweave: Arweave) {\r\n    this.arweave = arweave;\r\n    this.community = new Community(arweave, JSON.parse(wallet));\r\n    this.initRoutes();\r\n  }\r\n\r\n  private initRoutes() {\r\n    this.router.get(this.path, (_, res) => {\r\n      res.sendFile(path.join(__dirname, '../../dist/index.html')); \r\n    });\r\n\r\n    for(const page of pages) {\r\n      this.router.get(`${this.path}${page}`, (_, res) => {\r\n        res.sendFile(path.join(__dirname, `../../dist/${page}.html`));\r\n      });\r\n    }\r\n\r\n    this.router.get(`${this.path}chat`, (_, res) => {\r\n      res.redirect('https://discord.gg/5SMgD9t');\r\n    });\r\n\r\n    this.router.get(`${this.path}completeclaim`, (_, res) => {\r\n      res.redirect('./claim');\r\n    });\r\n\r\n    this.router.post(`${this.path}completeclaim`, this.completeClaim);\r\n  }\r\n\r\n  private async completeClaim(req: express.Request, res: express.Response) {\r\n    if(!req.body || !req.body.wallet) {\r\n      return res.send('Invalid data.');\r\n    }\r\n  \r\n    let address = '';\r\n    let referrer = req.body.ref || '';\r\n  \r\n    try {\r\n      address = await this.arweave.wallets.jwkToAddress(req.body.wallet);\r\n    } catch (err) {\r\n      return res.send('Invalid params.');\r\n    }\r\n  \r\n    if(!/[a-z0-9_-]{43}/i.test(address)) {\r\n      return res.send('Invalid address provided.');\r\n    }\r\n  \r\n    if(referrer.length) {\r\n      referrer = referrer.toString().trim();\r\n    }\r\n    if(!/[a-z0-9_-]{43}/i.test(referrer)) {\r\n      referrer = '';\r\n    }\r\n  \r\n    let account = null;\r\n    try {\r\n      account = await Account.findOne({ addy: address });\r\n    } catch (err) {\r\n      console.log(err);\r\n      return res.send('Unable to connect, contact the admin.');\r\n    }\r\n  \r\n    if(!account) {\r\n      const queryFirstTx = `\r\n      query {\r\n        transactions(owners:[\"${address}\"], recipients: [\"\"],\r\n        block: { max: 551000 }, first: 1, sort:HEIGHT_ASC) {\r\n          edges {\r\n            node {\r\n              recipient,\r\n              block {\r\n                height\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      `;\r\n      const queryLastTx = `\r\n      query {\r\n        transactions(owners:[\"${address}\"], recipients: [\"\"],\r\n        block: { max: 551000 }, first: 1) {\r\n          edges {\r\n            node {\r\n              recipient,\r\n              block {\r\n                height\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      `;\r\n  \r\n      let firstTx = '';\r\n      let lastTx = '';\r\n      try {\r\n        const r = await this.arweave.api.post('/graphql', {query: queryFirstTx});\r\n        firstTx = r.data.data.transactions.edges[0].node.block.height;\r\n      } catch (e) {\r\n        return res.send('You don\\'t have any data tx before block 551,000.');\r\n      }\r\n      \r\n      try {\r\n        const r = await this.arweave.api.post('/graphql', {query: queryLastTx});\r\n        lastTx = r.data.data.transactions.edges[0].node.block.height;\r\n      } catch (e) {\r\n        return res.send('You don\\'t have any data tx before block 551,000.');\r\n      }\r\n  \r\n      // Save the account\r\n      account = new Account({\r\n        addy: address,\r\n        referrer: referrer,\r\n        firstTx,\r\n        lastTx\r\n      });\r\n      try {\r\n        await account.save();\r\n      } catch (err) {\r\n        console.log(err);\r\n        return res.send('Unable to connect, contact the admin.');\r\n      }\r\n  \r\n      // Send the tokens\r\n      if(!this.isSetTxId) {\r\n        await this.community.setCommunityTx('mzvUgNc8YFk0w5K5H7c8pyT-FC5Y_ba0r7_8766Kx74');\r\n        this.isSetTxId = true;\r\n      }\r\n      await this.community.getState();\r\n  \r\n      let txid = '';\r\n      try {\r\n        txid = await this.community.transfer(address, 10000);\r\n      } catch(e) {\r\n        console.log(e);\r\n        return res.send('Unable to do the transfer, try again later.');\r\n      }\r\n  \r\n      if(referrer && referrer !== address) {\r\n        this.community.transfer(referrer, 2000).catch(e => {\r\n          console.log(e);\r\n        });\r\n      }\r\n      return res.send(`OK-${txid}`);\r\n    }\r\n  \r\n    return res.send('DONE');\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
