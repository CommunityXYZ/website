{
  "version": 3,
  "sources": ["../../server/models/cache.ts"],
  "sourcesContent": ["import * as memored from 'memored';\r\nimport { CronJob } from 'cron';\r\n\r\nexport default class Caching {\r\n  private _data: Map<string, string> = new Map();\r\n\r\n  constructor() {\r\n    new CronJob('*/30 * * * *', () => this.clearLocal(), null, true, 'America/New_York');\r\n  }\r\n\r\n  async get(key: string): Promise<string> {\r\n    if (this._data.has(key)) {\r\n      return this._data.get(key);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      memored.read(key, (err: any, val: string) => {\r\n        if (err) return reject(err);\r\n        resolve(val);\r\n      });\r\n    });\r\n  }\r\n\r\n  async set(key: string, val: string): Promise<number> {\r\n    return new Promise((resolve, reject) => {\r\n      memored.store(key, val, (err: any, expTime: number) => {\r\n        if (err) return reject(err);\r\n        resolve(expTime);\r\n\r\n        this._data.set(key, val);\r\n      });\r\n    });\r\n  }\r\n\r\n  private async clearLocal() {\r\n    const size = +this._data.size.toString();\r\n    this._data.clear();\r\n\r\n    console.log(`Map cleared, before: ${size} items, now: ${this._data.size} items.`);\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,cAAyB;AACzB,kBAAwB;AADxB;AAAA,EAME;AAFQ,iBAA6B,IAAI;AAGvC,QAAI,oBAAQ,gBAAgB,MAAM,KAAK,cAAc,MAAM,MAAM;AAAA;AAAA,EAG7D,IAAI;AAA8B;AACtC,UAAI,KAAK,MAAM,IAAI;AACjB,eAAO,KAAK,MAAM,IAAI;AAAA;AAGxB,aAAO,IAAI,QAAQ,CAAC,SAAS;AAC3B,gBAAQ,KAAK,KAAK,CAAC,KAAU;AAC3B,cAAI;AAAK,mBAAO,OAAO;AACvB,kBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKR,IAAI,KAAa;AAA8B;AACnD,aAAO,IAAI,QAAQ,CAAC,SAAS;AAC3B,gBAAQ,MAAM,KAAK,KAAK,CAAC,KAAU;AACjC,cAAI;AAAK,mBAAO,OAAO;AACvB,kBAAQ;AAER,eAAK,MAAM,IAAI,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAKZ;AAAa;AACzB,YAAM,OAAO,CAAC,KAAK,MAAM,KAAK;AAC9B,WAAK,MAAM;AAEX,cAAQ,IAAI,wBAAwB,oBAAoB,KAAK,MAAM;AAAA;AAAA;AAAA;",
  "names": []
}
