{
  "version": 3,
  "sources": ["../../server/controllers/caching.ts"],
  "sourcesContent": ["import GQLResultInterface from 'ar-gql/dist/types';\r\nimport Arweave from 'arweave';\r\nimport Community from 'community-js';\r\nimport { StateInterface } from 'community-js/lib/faces';\r\nimport * as express from 'express';\r\nimport cors from 'cors';\r\nimport Caching from '../models/cache';\r\n\r\nconst cache = new Caching();\r\nconst whitelist = ['https://community.xyz', 'http://community.xyz', 'https://arweave.net', 'http://localhost'];\r\nconst corsOptionsDelegate = function (req, callback) {\r\n  let corsOptions = { origin: false };\r\n  if (whitelist.indexOf(req.header('Origin')) !== -1) {\r\n    corsOptions = { origin: true } // reflect (enable) the requested origin in the CORS response\r\n  }\r\n  callback(null, corsOptions) // callback expects two parameters: error and options\r\n}\r\n\r\nexport default class CacheController {\r\n  path = '/caching/';\r\n  router = express.Router();\r\n\r\n  private arweave: Arweave;\r\n\r\n  constructor(arweave: Arweave) {\r\n    this.arweave = arweave;\r\n    this.setCommunities();\r\n\r\n    this.initRoutes();\r\n  }\r\n\r\n  private initRoutes() {\r\n    // @ts-ignore\r\n    this.router.get(`${this.path}communities`, cors(corsOptionsDelegate), async (req, res) => {\r\n      await this.getCommunities(req, res);\r\n    });\r\n  }\r\n\r\n  private async getCommunities(req: express.Request, res: express.Response) {\r\n    const cached = await cache.get('getcommunities');\r\n    if(cached) {\r\n      return res.json(JSON.parse(cached));\r\n    }\r\n\r\n    return res.json(await this.setCommunities());\r\n  }\r\n\r\n  private async setCommunities() {\r\n    const ids = await this.getAllCommunityIds();\r\n\r\n    const states: { id: string, state: StateInterface }[] = [];\r\n    let current = -1;\r\n    const go = async (i = 0) => {\r\n      if(i >= ids.length) {\r\n        return true;\r\n      }\r\n\r\n      const id = ids[i];\r\n      let state: StateInterface;\r\n\r\n      try {\r\n        const community = new Community(this.arweave);\r\n        await community.setCommunityTx(id);\r\n        state = await community.getState(true);\r\n\r\n        // @ts-ignore\r\n        state.settings = Array.from(state.settings).reduce((obj, [key, value]) => (\r\n          Object.assign(obj, { [key]: value }) // Be careful! Maps can have non-String keys; object literals can't.\r\n        ), {});\r\n\r\n        states.push({id, state});\r\n      } catch(e) {}\r\n      return go(++current);\r\n    };\r\n\r\n    const gos = [];\r\n    for (let i = 0, j = 5; i < j; i++) {\r\n      gos.push(go(++current));\r\n    }\r\n\r\n    await Promise.all(gos);\r\n    cache.set('getcommunities', JSON.stringify(states)).catch(console.log);\r\n\r\n    setTimeout(() => this.setCommunities(), 1000 * 60 * 30);\r\n\r\n    return states;\r\n  }\r\n\r\n  private async getAllCommunityIds(): Promise<string[]> {\r\n    let cursor = '';\r\n    let hasNextPage = true;\r\n  \r\n    let ids: string[] = [];\r\n    while (hasNextPage) {\r\n      const query = {\r\n        query: `query {\r\n          transactions(\r\n            tags: [\r\n              {name: \"App-Name\", values: [\"SmartWeaveContract\"]},\r\n              {name: \"Contract-Src\", values: [\"ngMml4jmlxu0umpiQCsHgPX2pb_Yz6YDB8f7G6j-tpI\"]}\r\n            ]\r\n            after: \"${cursor}\"\r\n            first: 100\r\n          ) {\r\n            pageInfo {\r\n              hasNextPage\r\n            }\r\n            edges {\r\n              cursor\r\n              node {\r\n                id\r\n                recipient\r\n                quantity {\r\n                  ar\r\n                }\r\n                owner {\r\n                  address\r\n                },\r\n                tags {\r\n                  name,\r\n                  value\r\n                }\r\n                block {\r\n                  timestamp\r\n                  height\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }`,\r\n      };\r\n      const res = await this.arweave.api.post('/graphql', query);\r\n      const data: GQLResultInterface = res.data;\r\n  \r\n      for (let i = 0, j = data.data.transactions.edges.length; i < j; i++) {\r\n        ids.push(data.data.transactions.edges[i].node.id);\r\n      }\r\n      hasNextPage = data.data.transactions.pageInfo.hasNextPage;\r\n  \r\n      if (hasNextPage) {\r\n        cursor = data.data.transactions.edges[data.data.transactions.edges.length - 1].cursor;\r\n      }\r\n    }\r\n  \r\n    return ids;\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAEA,0BAAsB;AAEtB,cAAyB;AACzB,kBAAiB;AACjB,mBAAoB;AAEpB,MAAM,QAAQ,IAAI;AAClB,MAAM,YAAY,CAAC,yBAAyB,wBAAwB,uBAAuB;AAC3F,MAAM,sBAAsB,SAAU,KAAK;AACzC,MAAI,cAAc,CAAE,QAAQ;AAC5B,MAAI,UAAU,QAAQ,IAAI,OAAO,eAAe;AAC9C,kBAAc,CAAE,QAAQ;AAAA;AAE1B,WAAS,MAAM;AAAA;AAfjB;AAAA,EAwBE,YAAY;AALZ,gBAAO;AACP,kBAAS,QAAQ;AAKf,SAAK,UAAU;AACf,SAAK;AAEL,SAAK;AAAA;AAAA,EAGC;AAEN,SAAK,OAAO,IAAI,GAAG,KAAK,mBAAmB,oBAAK,sBAAsB,CAAO,KAAK,QAAQ;AACxF,YAAM,KAAK,eAAe,KAAK;AAAA;AAAA;AAAA,EAIrB,eAAe,KAAsB;AAAuB;AACxE,YAAM,SAAS,MAAM,MAAM,IAAI;AAC/B,UAAG;AACD,eAAO,IAAI,KAAK,KAAK,MAAM;AAAA;AAG7B,aAAO,IAAI,KAAK,MAAM,KAAK;AAAA;AAAA;AAAA,EAGf;AAAiB;AAC7B,YAAM,MAAM,MAAM,KAAK;AAEvB,YAAM,SAAkD;AACxD,UAAI,UAAU;AACd,YAAM,KAAK,CAAO,IAAI,MAAM;AAC1B,YAAG,KAAK,IAAI;AACV,iBAAO;AAAA;AAGT,cAAM,KAAK,IAAI;AACf,YAAI;AAEJ;AACE,gBAAM,YAAY,IAAI,4BAAU,KAAK;AACrC,gBAAM,UAAU,eAAe;AAC/B,kBAAQ,MAAM,UAAU,SAAS;AAGjC,gBAAM,WAAW,MAAM,KAAK,MAAM,UAAU,OAAO,CAAC,KAAK,CAAC,KAAK,WAC7D,OAAO,OAAO,KAAK,EAAG,MAAM,SAC3B;AAEH,iBAAO,KAAK,CAAC,IAAI;AAAA,iBACX;AAAA;AACR,eAAO,GAAG,EAAE;AAAA;AAGd,YAAM,MAAM;AACZ,eAAS,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG;AAC5B,YAAI,KAAK,GAAG,EAAE;AAAA;AAGhB,YAAM,QAAQ,IAAI;AAClB,YAAM,IAAI,kBAAkB,KAAK,UAAU,SAAS,MAAM,QAAQ;AAElE,iBAAW,MAAM,KAAK,kBAAkB,MAAO,KAAK;AAEpD,aAAO;AAAA;AAAA;AAAA,EAGK;AAAwC;AACpD,UAAI,SAAS;AACb,UAAI,cAAc;AAElB,UAAI,MAAgB;AACpB,aAAO;AACL,cAAM,QAAQ;AAAA,UACZ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BhB,cAAM,MAAM,MAAM,KAAK,QAAQ,IAAI,KAAK,YAAY;AACpD,cAAM,OAA2B,IAAI;AAErC,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,aAAa,MAAM,QAAQ,IAAI,GAAG;AAC9D,cAAI,KAAK,KAAK,KAAK,aAAa,MAAM,GAAG,KAAK;AAAA;AAEhD,sBAAc,KAAK,KAAK,aAAa,SAAS;AAE9C,YAAI;AACF,mBAAS,KAAK,KAAK,aAAa,MAAM,KAAK,KAAK,aAAa,MAAM,SAAS,GAAG;AAAA;AAAA;AAInF,aAAO;AAAA;AAAA;AAAA;",
  "names": []
}
